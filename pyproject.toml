[build-system]
requires = ["setuptools>=64", "wheel", "setuptools_scm>=8.1"]
build-backend = "setuptools.build_meta"

[project]
name = "sss"
authors = [
    {name = "Cheng Ren", email = "cheng.ren@berkley.edu"},
    {name = "Aziza Mirsaidova", email = "azizakhon@u.northwestern.edu"},
    {name = "Priyana Patel", email = "priyanap@uw.edu"},
    {name = "Hector Sosa", email = "hectorso@buffalo.edu"},
    {name = "Bryna Hazelton", email = "brynah@phys.washington.edu"},
]
maintainers = [
    {name = "Bryna Hazelton", email = "brynah@phys.washington.edu"},
    {name = "Annie Kucklick", email = "brynah@phys.washington.edu"},
]
description = "Python interface for Self-Sufficiency Standard Database"
readme = "README.md"
dynamic = ["version"]
dependencies = [
    "alembic>=1.10",
    "numpy>=1.21",
    "openpyxl>=3.1.0,!=3.1.1",
    "pandas>=1.5.0",
    "pyxlsb>=1.0.8",
    "setuptools_scm>=8.1",
    "sqlalchemy>=1.4.16",
]
requires-python = ">=3.8"
keywords = ["poverty", "inequality", "basic needs"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Sociology",
    "Topic :: Other/Nonlisted Topic",
]

[project.optional-dependencies]
doc = ["sphinx>=6.2", "sphinx_rtd_theme==1.2.2", "pypandoc"]
test = ["coverage", "pre-commit", "pytest", "pytest-cov"]
dev = ["sss[test,doc]"]

[project.urls]
Repository = "https://github.com/Center-for-Women-s-Welfare/SSS"
Documentation = "https://self-sufficiency-standard.readthedocs.io/en/latest/"

# Note that this approach is "discouraged" in favor of [project.scripts], but
# that requires entry-point functions, which would require some refactoring.
[tool.setuptools]
script-files = [
    "scripts/add_one_entry_reportdb.py",
    "scripts/create_database.py",
    "scripts/data_to_city.py",
    "scripts/data_to_geoid.py",
    "scripts/data_to_primary.py",
    "scripts/data_to_puma.py",
    "scripts/data_to_report.py",
]

[tool.setuptools_scm]

[tool.pytest.ini_options]
addopts = "--ignore=scripts"

[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "W", # pycodestyle warnings
    "F", # Pyflakes
    "D", # pydocstyle
    "UP", # pyupgrade
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "N", # pep8-naming
    "SIM", # flake8-simplify
    "I", # isort
    # "C90", # McCabe complexity. Consider for the future
]
ignore = [
    "B028", # no-explicit-stacklevel for warnings
    "SIM108", # prefer ternary opperators. I find them difficult to read.
    "D203", # one-blank-line-before-class. we use two.
    "D212", # multi-line-summary-first-line. We put it on the second line.
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"] # Don't require docstrings for tests
"docs/*.py" = ["D", "A"] # Don't require docstrings or worry about builtins for docs
"alembic/*" = ["D"] # Don't require docstrings for alembic autogenerated code
"jupyter_notebooks/*.ipynb" = ["E501"] # Don't worry about line lengths in notebooks

[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.ruff.lint.pycodestyle]
max-line-length = 88

# consider setting this in the future
# [tool.ruff.lint.mccabe]
# max-complexity = 30

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["sss"]
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.bandit.assert_used]
skips = ["*/*_test.py", "*/test_*.py"]
